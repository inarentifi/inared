{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/inarentifi/inared/blob/main/HOMEWORK%20WEEK%208%20.2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Homework on Lesson 3 - Intro to Pandas\n",
        "\n",
        "Αυτή η εργασία περιγράφει μια ενδεικτική ροή εργασιών (workflow) που ακολουθούμε για την ανάλυση δεδομένων.\n",
        "\n",
        "Ακολουθήστε το ροή του notebook, διαβάστε τις πληροφορίες, τις οδηγίες και τις συμβουλές, συμπληρώστε τον κώδικα που λείπει και τέλος κάντε τις δικές σας αναλύσεις."
      ],
      "metadata": {
        "id": "RXN7sNeN8dZG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Ανάλυση ενός dataset με ταινίες από το IMDB**\n",
        "\n",
        "Έχουμε ένα αρχείο .csv το οποίο περιέχει τις καλύτερες 1000 ταινίες του IMDB.\n",
        "\n",
        "Χρησιμοποιώντας την Python και τις βιβλιοθήκες Pandas και Matplotlib:\n",
        "\n",
        "* εξετάστε τα δεδομένα\n",
        "* δημιουργήσε οπτικοποιήσεις για να κάνετε καλύτερες παρατηρήσεις\n",
        "* εντοπίστε θέματα για διερεύνηση\n",
        "* θέστε ενδιαφέροντα ερωτήματα\n",
        "* κάνετε περισσότερες αναλύσεις συνδυάζοντας τα δεδομένα, και\n",
        "* γράψτε μια μικρή παράγραφο με τα σημαντικότερα ευρήματά σας"
      ],
      "metadata": {
        "id": "NoDs3Hf_CaSn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **1. Εισαγωγή βιβλιοθηκών**\n",
        "\n",
        "Εισάγουμε στο notebook τα pandas ως pd και τη matplotlib.pyplot ως plt  "
      ],
      "metadata": {
        "id": "bywjItX-Y6ZH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd"
      ],
      "metadata": {
        "id": "fbF6DffwXaS3"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%matplotlib inline"
      ],
      "metadata": {
        "id": "6256ehXySaEE"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **2. Εισαγωγή αρχείου δεδομένων**\n",
        "\n",
        "Διαβάζουμε με τα Pandas το csv από τη διεύθυνση https://raw.githubusercontent.com/thechaudharysab/imdb-data-pandas-visualization/master/data/imdb_1000.csv και το αποθηκεύουμε σε ένα dataframe με όνομα movies_df"
      ],
      "metadata": {
        "id": "wCBYczZ0ZeTz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"https://raw.githubusercontent.com/thechaudharysab/imdb-data-pandas-visualization/master/data/imdb_1000.csv\")\n",
        "df"
      ],
      "metadata": {
        "id": "xuceEMewZdl7",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "outputId": "86531ae2-3300-4d98-b1c8-bea05406ccfd"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     star_rating                                            title  \\\n",
              "0            9.3                         The Shawshank Redemption   \n",
              "1            9.2                                    The Godfather   \n",
              "2            9.1                           The Godfather: Part II   \n",
              "3            9.0                                  The Dark Knight   \n",
              "4            8.9                                     Pulp Fiction   \n",
              "..           ...                                              ...   \n",
              "974          7.4                                          Tootsie   \n",
              "975          7.4                      Back to the Future Part III   \n",
              "976          7.4  Master and Commander: The Far Side of the World   \n",
              "977          7.4                                      Poltergeist   \n",
              "978          7.4                                      Wall Street   \n",
              "\n",
              "    content_rating      genre  duration  \\\n",
              "0                R      Crime       142   \n",
              "1                R      Crime       175   \n",
              "2                R      Crime       200   \n",
              "3            PG-13     Action       152   \n",
              "4                R      Crime       154   \n",
              "..             ...        ...       ...   \n",
              "974             PG     Comedy       116   \n",
              "975             PG  Adventure       118   \n",
              "976          PG-13     Action       138   \n",
              "977             PG     Horror       114   \n",
              "978              R      Crime       126   \n",
              "\n",
              "                                           actors_list  \n",
              "0    [u'Tim Robbins', u'Morgan Freeman', u'Bob Gunt...  \n",
              "1      [u'Marlon Brando', u'Al Pacino', u'James Caan']  \n",
              "2    [u'Al Pacino', u'Robert De Niro', u'Robert Duv...  \n",
              "3    [u'Christian Bale', u'Heath Ledger', u'Aaron E...  \n",
              "4    [u'John Travolta', u'Uma Thurman', u'Samuel L....  \n",
              "..                                                 ...  \n",
              "974  [u'Dustin Hoffman', u'Jessica Lange', u'Teri G...  \n",
              "975  [u'Michael J. Fox', u'Christopher Lloyd', u'Ma...  \n",
              "976  [u'Russell Crowe', u'Paul Bettany', u'Billy Bo...  \n",
              "977  [u'JoBeth Williams', u\"Heather O'Rourke\", u'Cr...  \n",
              "978  [u'Charlie Sheen', u'Michael Douglas', u'Tamar...  \n",
              "\n",
              "[979 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4c8733c5-8f8e-4406-bd76-f420e5e08309\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>star_rating</th>\n",
              "      <th>title</th>\n",
              "      <th>content_rating</th>\n",
              "      <th>genre</th>\n",
              "      <th>duration</th>\n",
              "      <th>actors_list</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>9.3</td>\n",
              "      <td>The Shawshank Redemption</td>\n",
              "      <td>R</td>\n",
              "      <td>Crime</td>\n",
              "      <td>142</td>\n",
              "      <td>[u'Tim Robbins', u'Morgan Freeman', u'Bob Gunt...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>9.2</td>\n",
              "      <td>The Godfather</td>\n",
              "      <td>R</td>\n",
              "      <td>Crime</td>\n",
              "      <td>175</td>\n",
              "      <td>[u'Marlon Brando', u'Al Pacino', u'James Caan']</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>9.1</td>\n",
              "      <td>The Godfather: Part II</td>\n",
              "      <td>R</td>\n",
              "      <td>Crime</td>\n",
              "      <td>200</td>\n",
              "      <td>[u'Al Pacino', u'Robert De Niro', u'Robert Duv...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>9.0</td>\n",
              "      <td>The Dark Knight</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>Action</td>\n",
              "      <td>152</td>\n",
              "      <td>[u'Christian Bale', u'Heath Ledger', u'Aaron E...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>8.9</td>\n",
              "      <td>Pulp Fiction</td>\n",
              "      <td>R</td>\n",
              "      <td>Crime</td>\n",
              "      <td>154</td>\n",
              "      <td>[u'John Travolta', u'Uma Thurman', u'Samuel L....</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>974</th>\n",
              "      <td>7.4</td>\n",
              "      <td>Tootsie</td>\n",
              "      <td>PG</td>\n",
              "      <td>Comedy</td>\n",
              "      <td>116</td>\n",
              "      <td>[u'Dustin Hoffman', u'Jessica Lange', u'Teri G...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>975</th>\n",
              "      <td>7.4</td>\n",
              "      <td>Back to the Future Part III</td>\n",
              "      <td>PG</td>\n",
              "      <td>Adventure</td>\n",
              "      <td>118</td>\n",
              "      <td>[u'Michael J. Fox', u'Christopher Lloyd', u'Ma...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>976</th>\n",
              "      <td>7.4</td>\n",
              "      <td>Master and Commander: The Far Side of the World</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>Action</td>\n",
              "      <td>138</td>\n",
              "      <td>[u'Russell Crowe', u'Paul Bettany', u'Billy Bo...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>977</th>\n",
              "      <td>7.4</td>\n",
              "      <td>Poltergeist</td>\n",
              "      <td>PG</td>\n",
              "      <td>Horror</td>\n",
              "      <td>114</td>\n",
              "      <td>[u'JoBeth Williams', u\"Heather O'Rourke\", u'Cr...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>978</th>\n",
              "      <td>7.4</td>\n",
              "      <td>Wall Street</td>\n",
              "      <td>R</td>\n",
              "      <td>Crime</td>\n",
              "      <td>126</td>\n",
              "      <td>[u'Charlie Sheen', u'Michael Douglas', u'Tamar...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>979 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4c8733c5-8f8e-4406-bd76-f420e5e08309')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4c8733c5-8f8e-4406-bd76-f420e5e08309 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4c8733c5-8f8e-4406-bd76-f420e5e08309');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1a7accd2-eb9a-48cd-88e3-88b39a3b979d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1a7accd2-eb9a-48cd-88e3-88b39a3b979d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1a7accd2-eb9a-48cd-88e3-88b39a3b979d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 979,\n  \"fields\": [\n    {\n      \"column\": \"star_rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3360693261479551,\n        \"min\": 7.4,\n        \"max\": 9.3,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          9.3,\n          7.6,\n          7.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 975,\n        \"samples\": [\n          \"No Country for Old Men\",\n          \"Of Mice and Men\",\n          \"Persona\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"content_rating\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          \"GP\",\n          \"TV-MA\",\n          \"R\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"genre\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 16,\n        \"samples\": [\n          \"Crime\",\n          \"Action\",\n          \"Biography\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26,\n        \"min\": 64,\n        \"max\": 242,\n        \"num_unique_values\": 133,\n        \"samples\": [\n          149,\n          91,\n          119\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"actors_list\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 969,\n        \"samples\": [\n          \"[u'Robert De Niro', u'Jerry Lewis', u'Diahnne Abbott']\",\n          \"[u'Wagner Moura', u'Andr\\\\xe9 Ramiro', u'Caio Junqueira']\",\n          \"[u'Ken Watanabe', u'Kazunari Ninomiya', u'Tsuyoshi Ihara']\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **3. Επισκόπηση του dataframe**\n",
        "\n",
        "Πρώτα - πρώτα θέλουμε να δούμε και να κατανοήσουμε τι περιλαμβάνεται στα δεδομένα μας.\n",
        "\n",
        "* ποια είναι τα ονόματα των στηλών;\n",
        "* τι είδους είναι οι μεταβλητές μας; ποιος είναι ο τύπος των δεδομένων κάθε στήλης;\n",
        "* πόσες εγγραφές έχει συνολικά το δείγμα μας;\n",
        "* ποια είναι τα βασικά στατιστικά στοιχεία του dataframe;\n",
        "* ποιες μεταβλητές συσχετίζονται μεταξύ τους και πώς (correlation);\n",
        "\n",
        "Παίρνουμε απαντήσεις για τα παραπάνω ερωτήματα με τη βοήθεια των εργαλείων που μας παρέχουν τα Pandas.\n"
      ],
      "metadata": {
        "id": "76OJr-cwabIa"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "id": "dC6u1oxOdBpW",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "bf1fb0ab-71a9-4d8c-cc88-fb15660b9993"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['star_rating', 'title', 'content_rating', 'genre', 'duration',\n",
              "       'actors_list'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.dtypes"
      ],
      "metadata": {
        "id": "gZSd-rwadxRZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a1d15ea0-c690-4574-bf02-cb8b3b886497"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "star_rating       float64\n",
              "title              object\n",
              "content_rating     object\n",
              "genre              object\n",
              "duration            int64\n",
              "actors_list        object\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u4UyT9twTbn_",
        "outputId": "8ff80bab-cc76-47dc-e4dc-3c1fa0e1afde"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(979, 6)"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "id": "X3O2sFdbd5Ot",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "ccae7208-f5ae-4f71-dd9b-6e23945812f1"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       star_rating    duration\n",
              "count   979.000000  979.000000\n",
              "mean      7.889785  120.979571\n",
              "std       0.336069   26.218010\n",
              "min       7.400000   64.000000\n",
              "25%       7.600000  102.000000\n",
              "50%       7.800000  117.000000\n",
              "75%       8.100000  134.000000\n",
              "max       9.300000  242.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-19dc318c-890a-4c90-8ec5-43c618544151\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>star_rating</th>\n",
              "      <th>duration</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>979.000000</td>\n",
              "      <td>979.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>7.889785</td>\n",
              "      <td>120.979571</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.336069</td>\n",
              "      <td>26.218010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>7.400000</td>\n",
              "      <td>64.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>7.600000</td>\n",
              "      <td>102.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>7.800000</td>\n",
              "      <td>117.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>8.100000</td>\n",
              "      <td>134.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>9.300000</td>\n",
              "      <td>242.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-19dc318c-890a-4c90-8ec5-43c618544151')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-19dc318c-890a-4c90-8ec5-43c618544151 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-19dc318c-890a-4c90-8ec5-43c618544151');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5aedcf54-9c5a-4f5d-a1f5-813802e70c22\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5aedcf54-9c5a-4f5d-a1f5-813802e70c22')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5aedcf54-9c5a-4f5d-a1f5-813802e70c22 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"star_rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 343.6938703812036,\n        \"min\": 0.3360693261479551,\n        \"max\": 979.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          7.889785495403474,\n          7.8,\n          979.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 311.7020418625646,\n        \"min\": 26.218009846412073,\n        \"max\": 979.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          120.97957099080695,\n          117.0,\n          979.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[['duration', 'star_rating']].corr()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "gT2VEQbeZtzN",
        "outputId": "6cf3e02f-3549-408c-cbda-c3d5b92839c8"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "             duration  star_rating\n",
              "duration     1.000000     0.227149\n",
              "star_rating  0.227149     1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-26a1b777-ceed-448e-ac0c-cb3fa4a2c00a\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>duration</th>\n",
              "      <th>star_rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>duration</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.227149</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>star_rating</th>\n",
              "      <td>0.227149</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-26a1b777-ceed-448e-ac0c-cb3fa4a2c00a')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-26a1b777-ceed-448e-ac0c-cb3fa4a2c00a button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-26a1b777-ceed-448e-ac0c-cb3fa4a2c00a');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-22a5c129-d0a6-4b1e-8d75-5724bc517d33\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-22a5c129-d0a6-4b1e-8d75-5724bc517d33')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-22a5c129-d0a6-4b1e-8d75-5724bc517d33 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[['duration', 'star_rating']]\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5464880532417904,\n        \"min\": 0.22714918343059,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.22714918343059,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"star_rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5464880532417904,\n        \"min\": 0.22714918343059,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.22714918343059\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###**3.1 Πρώτα ερωτήματα**\n",
        "\n",
        "Ποιες είναι οι μοναδικές τιμές (unique) που παίρνουν οι ονομαστικές μεταβλητές content_rating και genre;"
      ],
      "metadata": {
        "id": "QwbmkYHuhDuA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['content_rating'].unique()\n",
        "df['genre'].unique()"
      ],
      "metadata": {
        "id": "1HMKwDpJh3nq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "36b43770-0072-47c8-a686-b131751541c4"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['Crime', 'Action', 'Drama', 'Western', 'Adventure', 'Biography',\n",
              "       'Comedy', 'Animation', 'Mystery', 'Horror', 'Film-Noir', 'Sci-Fi',\n",
              "       'History', 'Thriller', 'Family', 'Fantasy'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ποιες είναι η πιο μικρή και η πιο μεγάλη σε διάρκεια ταινία;\n",
        "\n",
        "Tip: εδώ μπορούν να μας βοηθήσουν το sort_values σε συνδυασμό με τα head και tail"
      ],
      "metadata": {
        "id": "s1JAO5kxjUUK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.sort_values(\"duration\").head(1)"
      ],
      "metadata": {
        "id": "yqBCqJ8Kjin6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "outputId": "77c5d4a7-8a18-42d3-f9fc-5ca6ee0db1ec"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     star_rating   title content_rating  genre  duration  \\\n",
              "389          8.0  Freaks        UNRATED  Drama        64   \n",
              "\n",
              "                                           actors_list  \n",
              "389  [u'Wallace Ford', u'Leila Hyams', u'Olga Bacla...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d4963232-861d-48e5-97b5-a598c93906a7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>star_rating</th>\n",
              "      <th>title</th>\n",
              "      <th>content_rating</th>\n",
              "      <th>genre</th>\n",
              "      <th>duration</th>\n",
              "      <th>actors_list</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>389</th>\n",
              "      <td>8.0</td>\n",
              "      <td>Freaks</td>\n",
              "      <td>UNRATED</td>\n",
              "      <td>Drama</td>\n",
              "      <td>64</td>\n",
              "      <td>[u'Wallace Ford', u'Leila Hyams', u'Olga Bacla...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d4963232-861d-48e5-97b5-a598c93906a7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d4963232-861d-48e5-97b5-a598c93906a7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d4963232-861d-48e5-97b5-a598c93906a7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"star_rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 8.0,\n        \"max\": 8.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          8.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Freaks\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"content_rating\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"UNRATED\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"genre\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Drama\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 64,\n        \"max\": 64,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          64\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"actors_list\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"[u'Wallace Ford', u'Leila Hyams', u'Olga Baclanova']\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.sort_values(\"duration\").tail(1)"
      ],
      "metadata": {
        "id": "y8SBpbbWkLhi",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "outputId": "3623f010-919a-41eb-eec1-3eafcbe0830a"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     star_rating   title content_rating  genre  duration  \\\n",
              "476          7.8  Hamlet          PG-13  Drama       242   \n",
              "\n",
              "                                           actors_list  \n",
              "476  [u'Kenneth Branagh', u'Julie Christie', u'Dere...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e2bc6fc2-fd7f-42d0-82e5-b037001a7ed8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>star_rating</th>\n",
              "      <th>title</th>\n",
              "      <th>content_rating</th>\n",
              "      <th>genre</th>\n",
              "      <th>duration</th>\n",
              "      <th>actors_list</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>476</th>\n",
              "      <td>7.8</td>\n",
              "      <td>Hamlet</td>\n",
              "      <td>PG-13</td>\n",
              "      <td>Drama</td>\n",
              "      <td>242</td>\n",
              "      <td>[u'Kenneth Branagh', u'Julie Christie', u'Dere...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e2bc6fc2-fd7f-42d0-82e5-b037001a7ed8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e2bc6fc2-fd7f-42d0-82e5-b037001a7ed8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e2bc6fc2-fd7f-42d0-82e5-b037001a7ed8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1,\n  \"fields\": [\n    {\n      \"column\": \"star_rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 7.8,\n        \"max\": 7.8,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          7.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Hamlet\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"content_rating\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"PG-13\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"genre\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Drama\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": 242,\n        \"max\": 242,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          242\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"actors_list\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"[u'Kenneth Branagh', u'Julie Christie', u'Derek Jacobi']\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ποια είναι η μέση διάρκεια όλων των ταινιών με ακρίβεια λεπτού;"
      ],
      "metadata": {
        "id": "5oz0rPw2k6Su"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.groupby(\"title\")[\"duration\"].mean()"
      ],
      "metadata": {
        "id": "CKoivaOdk5g4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "43aa580b-10c2-417b-9d0b-ed70c924a6e2"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "title\n",
              "(500) Days of Summer      95.0\n",
              "12 Angry Men              96.0\n",
              "12 Years a Slave         134.0\n",
              "127 Hours                 94.0\n",
              "2001: A Space Odyssey    160.0\n",
              "                         ...  \n",
              "Zero Dark Thirty         157.0\n",
              "Zodiac                   157.0\n",
              "Zombieland                88.0\n",
              "Zulu                     138.0\n",
              "[Rec]                     78.0\n",
              "Name: duration, Length: 975, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **3.2 Οπτικοποίηση των δεδομένων για καλύτερες παρατηρήσεις**\n",
        "\n",
        "Όπως έχουμε ήδη δει, διαφορετικά γραφήματα μας δίνουν διαφορετικές πληροφορίες και το είδος του γραφήματος εξαρτάται και από το είδος της μεταβλητής (nominal, interval, scale)"
      ],
      "metadata": {
        "id": "vqqhkzJGlsN6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **3.2.1 Ιστόγραμμα κατανομής συχνοτήτων (histogram) του duration**\n",
        "\n",
        "A histogram is an approximate representation of the distribution of numerical data. The term was first introduced by Karl Pearson. To construct a histogram, the first step is to \"**bin**\" (or \"bucket\") the range of values—that is, divide the entire range of values into a series of intervals—and then count how many values fall into each interval. The bins are usually specified as consecutive, non-overlapping intervals of a variable. The bins (intervals) must be adjacent and are often (but not required to be) of equal size. [wikipedia](https://en.wikipedia.org/wiki/Histogram)\n",
        "\n",
        "![](https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi0.wp.com%2Finsightextractor.com%2Fwp-content%2Fuploads%2F2016%2F06%2FHistogram.jpg%3Fresize%3D183%252C185%26ssl%3D1&f=1&nofb=1&ipt=8c50694cd4292dbb7f5c1aa9e7d355e7587071bc2d7fe56ef71a1449f4f2df4f&ipo=images)\n",
        "\n",
        "**More sources**:\n",
        "\n",
        "* Περισσότερες **πληροφορίες για τα ιστογράμματα** μπορείτε να βρείτε εδώ: https://chartio.com/learn/charts/histogram-complete-guide/\n",
        "* Περισσότερα για το **πώς να επιλέγετε τα σωστά γραφήματα** μπορείτε να δείτε εδώ: https://chartio.com/learn/charts/how-to-choose-data-visualization/\n",
        "\n",
        "Για να σχεδιάσουμε με την plot() ένα ιστόγραμμα, πρέπει να ορίσουμε στις παραμέτρους της το kind='hist' και να ορίσουμε και αριθμό bins.\n",
        "\n",
        "π.χ.\n",
        "```\n",
        "df['col_name'].plot(kind='hist', bins=20)\n",
        "```\n",
        "Η μέγιστη διάρκεια των ταινιών είναι 242 λεπτά, επομένως αν ορίσουμε bins=10 θα έχουμε τη διάρκεια χωρισμένη σε 25λεπτα. Το ιστόγραμμα θα μας δείξει πόσες ταινίες εμπίπτουν σε κάθε bin."
      ],
      "metadata": {
        "id": "k5TlSgUnmQZH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# δημιουργούμε ένα ιστόγραμμα με τις συχνότητες της διάρκειας των ταινιών, επιλέγοντας έναν αριθμό bins=10\n",
        "df['duration'].plot(kind='hist', bins=10)"
      ],
      "metadata": {
        "id": "l3chEiKYl_qi",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 448
        },
        "outputId": "fbee20b1-6e2c-4744-d8e5-8c1f370d2fa4"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='Frequency'>"
            ]
          },
          "metadata": {},
          "execution_count": 36
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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OHDA23UCAAC0ubO6+DowMFBjxozR8uXL9eyzz2r37t166KGHFB8frwkTJqiiosJbdQIAALS5swpGW7Zs0b333qvY2FgtWLBADz30kPbs2aPCwkKVl5dr1KhR3qoTAACgzQV6cqMFCxZo8eLFKi0t1ciRI/X6669r5MiRCgj4NWf17dtXS5YsUZ8+fbxZKwAAQJvyKBgtXLhQd911lyZNmqTY2NhW50RHR+u11147q+IAAADak0fBaNeuXaecExwcrIkTJ3qyewAAAJ/w6BqjxYsXa/ny5cdtX758uZYuXXrWRQEAAPiCR8EoPz9f3bt3P257dHS0nnnmmbMuCgAAwBc8CkZlZWXq27fvcdt79+6tsrKysy4KAADAFzwKRtHR0dq+fftx27/55ht169btrIsCAADwBY+C0bhx43T//fdr/fr1am5uVnNzs9atW6fp06dr7Nix3q4RAACgXXj0qbSnnnpK+/btU0pKigIDf91FS0uLJkyYwDVGAADAb3kUjIKDg/XOO+/oqaee0jfffKPOnTsrMTFRvXv39nZ9AAAA7cajYHTUJZdcoksuucRbtQAAAPiUR8GoublZS5Ys0dq1a7V//361tLS4ja9bt84rxQEAALQnj4LR9OnTtWTJEmVmZmrQoEGy2WzergsAAKDdeRSM3n77bb377rsaOXKkt+sBAADwGY8+rh8cHKyLL77Y27UAAAD4lEdnjB588EG99NJL+stf/sLbaOegPo987OsSAADwCY+C0eeff67169dr1apV+t3vfqegoCC38ffee88rxQEAALQnj4JRZGSkbrnlFm/XAgAA4FMeBaPFixd7uw4AAACf8+jia0lqamrSmjVr9Ne//lU1NTWSpPLych0+fNhrxQEAALQnj84Y/fTTT8rIyFBZWZnq6+v1+9//XmFhYXr22WdVX1+vgoICb9cJAADQ5jw6YzR9+nRdeeWV+te//qXOnTu7tt9yyy1au3at14oDAABoTx6dMfrss8+0adMmBQcHu23v06eP/vGPf3ilMAAAgPbm0RmjlpYWNTc3H7f9l19+UVhY2FkXBQAA4AseBaO0tDS9+OKLrnWbzabDhw/r8ccf52dCAACA3/LorbTnn39e6enpSkhIUF1dnW6//Xbt2rVL3bt311tvveXtGgEAANqFR8GoZ8+e+uabb/T2229r+/btOnz4sLKz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HHeCkZ/56quvVFFR4VoKCwslSf/xH//hmjNlyhS3OfPmzfNVuWettrZWl112mV555ZVWx+fNm6eXX35ZBQUF2rx5s7p06aL09HTV1dW55owfP147d+5UYWGhVq5cqY0bN+ruu+9urxY8drLejxw5oq+//lqPPfaYvv76a7333nsqLS3VzTfffNzcOXPmuD0e7rvvvvYo/6yc6rhLUkZGhltfb731ltu4vx536dT9/7bviooKLVq0SDabTVlZWW7z/PHYFxUVKScnR1988YUKCwvV2NiotLQ01dbWuubMmDFDH330kZYvX66ioiKVl5drzJgxrvHm5mZlZmaqoaFBmzZt0tKlS7VkyRLNnj3bFy2dtlP1Xl5ervLycj333HP69ttvtWTJEq1evVrZ2dnH7Wvx4sVux3706NHt3M2ZOZ3jLp389c1rx93Ar02fPt3069fPtLS0GGOM+X//7/+Z6dOn+7aoNiLJrFixwrXe0tJi7Ha7mT9/vmtbVVWVCQkJMW+99ZYxxpjvvvvOSDJfffWVa86qVauMzWYz//jHP9qt9rN1bO+t+fLLL40k89NPP7m29e7d27zwwgttW1wba633iRMnmlGjRp3wNufKcTfm9I79qFGjzPDhw922nQvH3hhj9u/fbySZoqIiY8yvz/GgoCCzfPly15zvv//eSDLFxcXGGGP+9re/mYCAAONwOFxzFi5caMLDw019fX37NnAWju29Ne+++64JDg42jY2Nrm2n85jp6Frr/VSvb9467pwx8mMNDQ164403dNddd7n9+O2bb76p7t27a9CgQcrLy9ORI0d8WGXb2bt3rxwOh1JTU13bIiIilJSUpOLiYklScXGxIiMjdeWVV7rmpKamKiAgQJs3b273mttSdXW1bDbbcb/7N3fuXHXr1k1DhgzR/PnzO/zbCadrw4YNio6O1qWXXqqpU6fq4MGDrrHz6bhXVlbq448/bvWswblw7I++TRQVFSVJKikpUWNjo9vzfsCAAerVq5fb8z4xMdHtS37T09PldDq1c+fOdqz+7Bzb+4nmhIeHKzDQ/fuac3Jy1L17d1199dVatGiRjJ99ZeGJej/Z65u3jvs58c3X56v3339fVVVVmjRpkmvb7bffrt69eysuLk7bt2/XrFmzVFpaqvfee893hbYRh8MhScd9w3lMTIxrzOFwKDo62m08MDBQUVFRrjnngrq6Os2aNUvjxo1z+0HJ+++/X1dccYWioqK0adMm5eXlqaKiQgsWLPBhtWcvIyNDY8aMUd++fbVnzx796U9/0ogRI1RcXKxOnTqdN8ddkpYuXaqwsDC3t5Kkc+PYt7S06IEHHtC1116rQYMGSfr1OR0cHHzc/wAc+7xv7d+Fo2P+oLXej/XPf/5TTz311HFvEc+ZM0fDhw9XaGioPv30U9177706fPiw7r///vYo/aydqPdTvb5567gTjPzYa6+9phEjRiguLs617bdPkMTERMXGxiolJUV79uxRv379fFEm2lhjY6P+8z//U8YYLVy40G0sNzfX9ffgwYMVHBysP/7xj8rPz/frnxIYO3as6+/ExEQNHjxY/fr104YNG5SSkuLDytrfokWLNH78eF1wwQVu28+FY5+Tk6Nvv/1Wn3/+ua9LaXen6t3pdCozM1MJCQl64okn3MYee+wx199DhgxRbW2t5s+f7zfB6ES9t9frG2+l+amffvpJa9as0X/913+ddF5SUpIkaffu3e1RVruy2+2SdNynUSorK11jdrtd+/fvdxtvamrSoUOHXHP82dFQ9NNPP6mwsNDtbFFrkpKS1NTUpH379rVPge3koosuUvfu3V2P83P9uB/12WefqbS09JT/Dkj+d+ynTZumlStXav369erZs6dru91uV0NDg6qqqtzmH/u8b+3fhaNjHd2Jej+qpqZGGRkZCgsL04oVKxQUFHTS/SUlJemXX35RfX19W5XsNafq/beOfX3z1nEnGPmpxYsXKzo6WpmZmSedt23bNklSbGxsO1TVvvr27Su73a61a9e6tjmdTm3evFnJycmSpOTkZFVVVamkpMQ1Z926dWppaXE9qfzV0VC0a9curVmzRt26dTvlbbZt26aAgIDj3mbyd7/88osOHjzoepyfy8f9t1577TUNHTpUl1122Snn+suxN8Zo2rRpWrFihdatW6e+ffu6jQ8dOlRBQUFuz/vS0lKVlZW5Pe937NjhFo6P/o9DQkJC+zTigVP1Lv36b1xaWpqCg4P14YcfHnemsDXbtm3ThRde2KHPFJ5O78c69vXNa8f9TK8Uh+81NzebXr16mVmzZrlt3717t5kzZ47ZsmWL2bt3r/nggw/MRRddZK6//nofVXr2ampqzNatW83WrVuNJLNgwQKzdetW1yev5s6dayIjI80HH3xgtm/fbkaNGmX69u1r/v3vf7v2kZGRYYYMGWI2b95sPv/8c9O/f38zbtw4X7V02k7We0NDg7n55ptNz549zbZt20xFRYVrOfrpi02bNpkXXnjBbNu2zezZs8e88cYbpkePHmbChAk+7uzUTtZ7TU2Neeihh0xxcbHZu3evWbNmjbniiitM//79TV1dnWsf/nrcjTn1494YY6qrq01oaKhZuHDhcbf352M/depUExERYTZs2OD2uD5y5Ihrzj333GN69epl1q1bZ7Zs2WKSk5NNcnKya7ypqckMGjTIpKWlmW3btpnVq1ebHj16mLy8PF+0dNpO1Xt1dbVJSkoyiYmJZvfu3W5zmpqajDHGfPjhh+Z///d/zY4dO8yuXbvMq6++akJDQ83s2bN92dopnar303l989ZxJxj5oU8++cRIMqWlpW7by8rKzPXXX2+ioqJMSEiIufjii83MmTNNdXW1jyo9e+vXrzeSjlsmTpxojPn1I/uPPfaYiYmJMSEhISYlJeW4/y4HDx4048aNM127djXh4eFm8uTJpqamxgfdnJmT9b53795WxySZ9evXG2OMKSkpMUlJSSYiIsJccMEFZuDAgeaZZ55xCw8d1cl6P3LkiElLSzM9evQwQUFBpnfv3mbKlCluH9E1xn+PuzGnftwbY8xf//pX07lzZ1NVVXXc7f352J/ocb148WLXnH//+9/m3nvvNRdeeKEJDQ01t9xyi6moqHDbz759+8yIESNM586dTffu3c2DDz7o9pH2juhUvZ/ocSHJ7N271xjz69dSXH755aZr166mS5cu5rLLLjMFBQWmubnZd42dhlP1frqvb9447jarIAAAgPMe1xgBAABYCEYAAAAWghEAAICFYAQAAGAhGAEAAFgIRgAAABaCEQAAgIVgBAAAYCEYAQAAWAhGAAAAFoIRAACAhWAEAABg+f/Mnj+YOgy8IgAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **3.2.2 Γράφημα πλαισίου (box plot) για τo duration**\n",
        "\n",
        "Ένα άλλο είδος γραφήματος για συνεχείς μεταβλητές είναι το boxplot.\n",
        "\n",
        "\n",
        "Το boxplot βασίζεται στα τεταρτημόρια (quartiles). Στο describe() τα βλέπουμε με τα 25%, 50% και 75%."
      ],
      "metadata": {
        "id": "mlj7VRkouidh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# describe τη στήλη 'duration'\n",
        "df[[\"duration\"]].describe()"
      ],
      "metadata": {
        "id": "8uRsmvhwybTZ",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "3ac4408f-4e95-49a9-8cd7-9088ddfee640"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "         duration\n",
              "count  979.000000\n",
              "mean   120.979571\n",
              "std     26.218010\n",
              "min     64.000000\n",
              "25%    102.000000\n",
              "50%    117.000000\n",
              "75%    134.000000\n",
              "max    242.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0c521f3f-6a2f-41cc-b9c8-dd5346a2ede2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>duration</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>979.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>120.979571</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>26.218010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>64.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>102.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>117.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>134.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>242.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0c521f3f-6a2f-41cc-b9c8-dd5346a2ede2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0c521f3f-6a2f-41cc-b9c8-dd5346a2ede2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0c521f3f-6a2f-41cc-b9c8-dd5346a2ede2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-484278d9-b710-4d09-acf0-3337e8099f9a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-484278d9-b710-4d09-acf0-3337e8099f9a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-484278d9-b710-4d09-acf0-3337e8099f9a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[[\\\"duration\\\"]]\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 311.7020418625646,\n        \"min\": 26.218009846412073,\n        \"max\": 979.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          120.97957099080695,\n          117.0,\n          979.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Στο παραπάνω output του describe() για το duration, βλέπουμε ότι το 25% των ταινιών έχει διάρκεια έως 102 λεπτά, το 50% των ταινιών έχει διάρκεια έως 117 λεπτά και το 75% των ταινιών έχει διάρκεια έως 134 λεπτά. Απ' αυτό προκύπτει ότι η διάμεσος (median), είναι στο 50%, δηλαδή αν κατατάξουμε όλες τις διάρκειες σε αύξουσα σειρά, η μεσαία τιμή είναι τα 117 λεπτά.\n",
        "\n",
        "Το boxplot μας δείχνει με ένα κουτί τα δύο μεσαία τεταρτημόρια (δηλαδή μέσα σε ποια όρια βρίσκεται το 50% των τιμών του δείγματος), το ανώτατο και το κατώτατο όριο, καθώς και τις ακραίες τιμές (outliers). Το ανώτατο όριο τίθεται μετά το τρίτο τεταρτημόριο (Q3) και σε απόσταση μιάμιση φορά τη διαφορά του Q3-Q1.\n",
        "\n",
        "![](https://chartio.com/assets/26dba4/tutorials/charts/box-plots/046df50d3e23296f1dda99a385bd54925317c413ffff2a63779ffef0a42b9434/box-plot-construction.png)\n",
        "\n",
        "**Read more**:\n",
        "* Περισσότερα για το boxplot μπορείτε να δείτε εδώ: https://chartio.com/learn/charts/box-plot-complete-guide/\n",
        "\n",
        "Για να σχεδιάσουμε ένα boxplot με την plot() αρκεί να ορίσουμε kind=box."
      ],
      "metadata": {
        "id": "Kz0e4xXpyZvv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# boxplot γράφημα για το duration\n",
        "df['duration'].plot(kind='box')"
      ],
      "metadata": {
        "id": "ry2XeMbhvnyA",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "outputId": "96cb3e1f-5a65-4388-9d3c-8ffbe931ecbe"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 43
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Με το boxplot βλέπουμε ότι:\n",
        "\n",
        "* το 50% των ταινιών του δείγματος έχει διάρκεια από 102 έως 134 λεπτά,\n",
        "* το κάτω άκρο είναι στο min, δηλαδή στα 64 λεπτά,\n",
        "* το άνω άκρο είναι στα 182 λεπτά (Q3 + 1.5\\*(Q3-Q1) = Q3 + 1.5\\*(134-102) = 134 + 1.5\\*32 = 182) και\n",
        "* η διάμεσος είναι στα 117 λεπτά.\n",
        "* Όλες οι ταινίες με διάρκεια μεγαλύτερη από 182 λεπτά (3 ώρες) είναι outliers.\n",
        "\n",
        "Τα **outliers** είναι συχνά ένα ωραίο θέμα έρευνας. Έτσι, από την εξέταση των δεδομένων μας προκύπτουν μερικά ενδιαφέροντα ερωτήματα που θα μπορούσαμε να θέσουμε αργότερα:\n",
        "* Ποιές είναι οι ασυνήθιστα μεγάλης διάρκειας ταινίας μέσα στις 1000 πρώτες του IMDB;\n",
        "* Ποια είναι τα χαρακτηριστικά τους (content_rating, genre, star_rating);"
      ],
      "metadata": {
        "id": "sz2SL_HI2kQj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **4. Συνέχιση της επισκόπησης, ανάλυσης και οπτικοποίησης των δεδομένων**"
      ],
      "metadata": {
        "id": "hxKRqZnZ9jCo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **4.1 Εξέταση του content rating** (ονομαστική μεταβλητή / nominal)\n",
        "\n",
        "Ξαναβλέπουμε τις μοναδικές τιμές (unique) που παίρνει η μεταβλητή content_rating"
      ],
      "metadata": {
        "id": "tx6NczS9_HI8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# unique τιμές της στήλης content_rating\n",
        "df['content_rating'].unique()"
      ],
      "metadata": {
        "id": "wSDod90TSNuI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9370a1ca-3382-4e52-b14f-e1235a66bb6e"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['R', 'PG-13', 'NOT RATED', 'PG', 'UNRATED', 'APPROVED', 'PASSED',\n",
              "       'G', 'X', nan, 'TV-MA', 'GP', 'NC-17'], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **nan (κενές τιμές)**\n",
        "\n",
        "Παρατηρούμε ότι στις τιμές υπάρχει και το nan. Το nan σημαίνει ότι η τιμή είναι κενή.\n",
        "\n",
        "Με τη συνάρτηση isnull(), κοιτάμε να δούμε αν υπάρχουν κενές τιμές και σε άλλες στήλες και πόσες είναι σε κάθε στήλη.\n",
        "\n",
        "π.χ.\n",
        "```\n",
        "df.isnull().sum(axis=0)\n",
        "```\n",
        "**εξήγηση του παραπάνω κώδικα**:\n",
        "* η συνάρτηση isnull() ελέγχει αν υπάρχει nan. Επομένως επιστρέφει τιμές True/False για κάθε κελί\n",
        "* με το sum() μετά το isnull() ζητάμε το άθροισμα των τιμών True\n",
        "* με το axis=0 στις παραμέτρους του sum() ορίζουμε ότι η πρόσθεση θα γίνει κατά στήλη (το axis=0 αναφέρεται στις στήλες και το axis=1 στις γραμμές)"
      ],
      "metadata": {
        "id": "nLgHDs-KS8LT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# sum των nan τιμών σε κάθε στήλη\n",
        "df.isnull().sum(axis=0)"
      ],
      "metadata": {
        "id": "EgJv1fDITfAT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5ba41f07-62a7-4581-bdca-79ed10aa1387"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "star_rating       0\n",
              "title             0\n",
              "content_rating    3\n",
              "genre             0\n",
              "duration          0\n",
              "actors_list       0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Εντοπισμός των nan**\n",
        "\n",
        "Ψάχνουμε με firtering να δούμε πού βρίσκονται οι κενές τιμές.\n",
        "\n",
        "π.χ.\n",
        "```\n",
        "df[df['col_name'].isnull()]\n",
        "```"
      ],
      "metadata": {
        "id": "_wPdNv8gXi7l"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# filter dataframe to find rows with nan value in 'content_rating' column\n",
        "df[df['content_rating'].isnull()]"
      ],
      "metadata": {
        "id": "JTMvp8bbX459",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 143
        },
        "outputId": "f45db3e0-426e-455d-cc2f-176760276c7e"
      },
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     star_rating                               title content_rating  \\\n",
              "187          8.2  Butch Cassidy and the Sundance Kid            NaN   \n",
              "649          7.7                   Where Eagles Dare            NaN   \n",
              "936          7.4                           True Grit            NaN   \n",
              "\n",
              "         genre  duration                                        actors_list  \n",
              "187  Biography       110  [u'Paul Newman', u'Robert Redford', u'Katharin...  \n",
              "649     Action       158  [u'Richard Burton', u'Clint Eastwood', u'Mary ...  \n",
              "936  Adventure       128    [u'John Wayne', u'Kim Darby', u'Glen Campbell']  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9a297754-e952-4792-9ef4-0e514c9cd044\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>star_rating</th>\n",
              "      <th>title</th>\n",
              "      <th>content_rating</th>\n",
              "      <th>genre</th>\n",
              "      <th>duration</th>\n",
              "      <th>actors_list</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>187</th>\n",
              "      <td>8.2</td>\n",
              "      <td>Butch Cassidy and the Sundance Kid</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Biography</td>\n",
              "      <td>110</td>\n",
              "      <td>[u'Paul Newman', u'Robert Redford', u'Katharin...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>649</th>\n",
              "      <td>7.7</td>\n",
              "      <td>Where Eagles Dare</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Action</td>\n",
              "      <td>158</td>\n",
              "      <td>[u'Richard Burton', u'Clint Eastwood', u'Mary ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>936</th>\n",
              "      <td>7.4</td>\n",
              "      <td>True Grit</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Adventure</td>\n",
              "      <td>128</td>\n",
              "      <td>[u'John Wayne', u'Kim Darby', u'Glen Campbell']</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9a297754-e952-4792-9ef4-0e514c9cd044')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9a297754-e952-4792-9ef4-0e514c9cd044 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9a297754-e952-4792-9ef4-0e514c9cd044');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4f0cc652-a88c-4488-b02f-f99f4c649882\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4f0cc652-a88c-4488-b02f-f99f4c649882')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4f0cc652-a88c-4488-b02f-f99f4c649882 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Αν έχουμε τη δυνατότητα να βρούμε τις τιμές που λείπουν, πηγαίνουμε στις πηγές. Στη συγκεκριμένη περίπτωση, πάμε στο IMDB και βρίσκουμε το content_rating για τις συγκεκριμένες ταινίες.\n",
        "\n",
        "Στη συνέχεια, εισάγουμε τις τιμές που βρήκαμε στο dataframe στα αντίστοιχα κελιά. Η επιλογή (selection) των κελιών γίνεται με τo loc.\n",
        "\n",
        "π.χ.\n",
        "\n",
        "```\n",
        "df.loc[[index_num1, index_num2],'col_name'] = 'value'\n",
        "df.loc[one_index_number,'col_name'] = 'value'\n",
        "```\n"
      ],
      "metadata": {
        "id": "tJGDfDDDYtVl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# assign content_rating values to cells with nan\n",
        "df.loc[[187],'content_rating'] = 'R'\n",
        "df.loc[[649], 'content_rating'] = 'G'\n",
        "df.loc[936,'content_rating'] = 'RG-13'"
      ],
      "metadata": {
        "id": "wYdYzBFNX_6d"
      },
      "execution_count": 57,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# ελέγχουμε την υλοποίηση των αλλαγών\n",
        "# e.g. df.loc[[index_num1, index_num2, ...], 'col_name']\n",
        "df.loc[[187],'content_rating'] ,df.loc[[649], 'content_rating'] , df.loc[[936],'content_rating']"
      ],
      "metadata": {
        "id": "xUeLoRk4aPay",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4b755749-44a5-4417-c8bd-599a10620c47"
      },
      "execution_count": 60,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(187    R\n",
              " Name: content_rating, dtype: object,\n",
              " 649    G\n",
              " Name: content_rating, dtype: object,\n",
              " 936    RG-13\n",
              " Name: content_rating, dtype: object)"
            ]
          },
          "metadata": {},
          "execution_count": 60
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Μείωση των κατηγοριών για ακατάλληλο περιεχόμενο (adult content)**\n",
        "\n",
        "Από τις μοναδικές τιμές της στήλης content_rating, παρατηρούμε ότι στις τιμές υπάρχουν τα NC-17, X και TV-MA. Και οι 3 αυτοί χαρακτηρισμοί αφορούν περιεχόμενο κατάλληλο μόνο για ενήλικες άνω των 17.\n",
        "\n",
        "Επομένως, μπορούμε με replace να αντικαταστήσουμε τα Χ και TV-MA με το ΝC-17, και να έχουμε για όλες τις ταινίες ενηλίκων τη σήμανση NC-17.\n",
        "\n",
        "**Note**: για να εγγραφεί η αλλαγή στο dataframe πρέπει να την αποθηκεύσουμε, δηλαδή να ορίσουμε ότι η στήλη content_rating θα είναι η στήλη content_rating **με** την αλλαγή.\n",
        "\n",
        "π.χ.\n",
        "```\n",
        "df['col_name'] = df['col_name'].replace(['old_val1','old_val2'], 'new_value')\n",
        "```\n"
      ],
      "metadata": {
        "id": "mnBufGcHSW48"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# replace 'X' and 'TV-MA' with 'NC-17'\n",
        "df['content_rating'] = df['content_rating'].replace(['X','TV-MA'], 'NC-17')"
      ],
      "metadata": {
        "id": "sdjRuKjhdoze"
      },
      "execution_count": 66,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# ελέγχουμε την υλοποίηση των αλλαγών\n",
        "df['content_rating']"
      ],
      "metadata": {
        "id": "0xLiUtZkebH3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f14daf7a-7281-41a9-9a80-a6bbe58c7c7f"
      },
      "execution_count": 67,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0          R\n",
              "1          R\n",
              "2          R\n",
              "3      PG-13\n",
              "4          R\n",
              "       ...  \n",
              "974       PG\n",
              "975       PG\n",
              "976    PG-13\n",
              "977       PG\n",
              "978        R\n",
              "Name: content_rating, Length: 979, dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 67
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### **Καταμέτρηση του πλήθους των ταινιών σε κάθε κατηγορία περιεχομένου**\n",
        "\n",
        "Όπως έχουμε δει στην Άσκηση 11 στο \"Intro to Pandas.ipynb\", μπορούμε να κάνουμε ομαδοποίηση των τιμών και να βρούμε τις συχνότητές τους (count).\n",
        "\n",
        "Αυτό θα κάνουμε κι εδώ για το content rating: ομαδοποίηση (groupby) ως προς το content_rating, καταμέτρηση (count) των τίτλων των ταινιών σε κάθε ομάδα και ταξινόμηση του αποτελέσματος σε φθίνουσα σειρά."
      ],
      "metadata": {
        "id": "1RE3-7bXR3l4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.groupby('content_rating')['title'].count().reset_index(name='count').sort_values(by='count', ascending=False)"
      ],
      "metadata": {
        "id": "q0bgkS-Gul_f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 394
        },
        "outputId": "82d851df-30fb-4331-bc03-f5e94d7b6090"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   content_rating  count\n",
              "8               R    461\n",
              "7           PG-13    189\n",
              "6              PG    123\n",
              "4       NOT RATED     65\n",
              "0        APPROVED     47\n",
              "10        UNRATED     38\n",
              "1               G     33\n",
              "3           NC-17     12\n",
              "5          PASSED      7\n",
              "2              GP      3\n",
              "9           RG-13      1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f2ba57b0-46dd-46c8-af82-44473233891e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>content_rating</th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>R</td>\n",
              "      <td>461</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>PG-13</td>\n",
              "      <td>189</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>PG</td>\n",
              "      <td>123</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NOT RATED</td>\n",
              "      <td>65</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>APPROVED</td>\n",
              "      <td>47</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>UNRATED</td>\n",
              "      <td>38</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>G</td>\n",
              "      <td>33</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>NC-17</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>PASSED</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>GP</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>RG-13</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f2ba57b0-46dd-46c8-af82-44473233891e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f2ba57b0-46dd-46c8-af82-44473233891e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f2ba57b0-46dd-46c8-af82-44473233891e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-89eb1d72-c536-4ee1-873e-db7662c07e3e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-89eb1d72-c536-4ee1-873e-db7662c07e3e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-89eb1d72-c536-4ee1-873e-db7662c07e3e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 11,\n  \"fields\": [\n    {\n      \"column\": \"content_rating\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 11,\n        \"samples\": [\n          \"UNRATED\",\n          \"R\",\n          \"GP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 136,\n        \"min\": 1,\n        \"max\": 461,\n        \"num_unique_values\": 11,\n        \"samples\": [\n          38,\n          461,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Γραφήματα**\n",
        "\n",
        "Οπτικοποιούμε την ομαδοποίηση με ένα bar chart.\n",
        "\n",
        "Για να ομορφύνει το γράφημα μπορούμε να προσθέσουμε έναν τίτλο καθώς και τίτλους στους άξονες x και y:\n",
        "* Για τον τίτλο του γραφήματος προσθέτουμε μέσα στην παρένθεση του plot: title='Content Rating Visualization'\n",
        "* Για τα labels στους άξονες x και y προσθέτουμε κάτω από την εντολή του plot στο ίδιο code cell:\n",
        "```\n",
        "plt.xlabel('Content Rating')\n",
        "plt.ylabel('Title Count')\n",
        "```"
      ],
      "metadata": {
        "id": "jzGWhEJIH0_7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# create bar chart\n",
        "df['content_rating'].value_counts().plot(title ='Content Rating Visualization',\n",
        "x = ('Content Rating') ,\n",
        "y = ( 'Title Count'))"
      ],
      "metadata": {
        "id": "xklPt4nZHhMU",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "outputId": "74913434-89a0-457a-ebb3-f856bd428f3a"
      },
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: title={'center': 'Content Rating Visualization'}, xlabel='content_rating'>"
            ]
          },
          "metadata": {},
          "execution_count": 85
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Βλέπουμε το γράφημα και εξετάζουμε αν είναι ακόμα καλύτερο με οριζόντιο barchart. Το ξαναφτιάχνουμε από κάτω για να τα συγκρίνουμε.\n",
        "\n",
        "**Note**: Προσέχουμε αν είναι σωστή η ταξινόμηση (τα περισσότερα counts να είναι στην κορυφή) και τα labels των αξόνων x και y"
      ],
      "metadata": {
        "id": "DTcF81wz8MgP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# create horizontal bar chart\n",
        "df['content_rating'].value_counts().sort_values(ascending=True).plot(title='Content Rating Visualization', x = ('Content Rating') ,\n",
        "y = ( 'Title Count') )\n",
        "\n"
      ],
      "metadata": {
        "id": "ov4KQJVcspV6",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        },
        "outputId": "2f2891e3-e9f7-4c07-aaaa-9f768e705fc0"
      },
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: title={'center': 'Content Rating Visualization'}, xlabel='content_rating'>"
            ]
          },
          "metadata": {},
          "execution_count": 87
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **4.2 Εξέταση με συγκρίσεις**\n",
        "\n",
        "#### **Υπάρχει συσχέτιση της βαθμολογίας των ταινιών (star_rating) με τη διάρκεια των ταινιών (duration);**\n",
        "\n",
        "Βλέπουμε τα στατιστικά στοιχεία για τη διάρκεια των ταινιών (duration) ανά βαθμολογία (star_rating) με ένα boxplot.\n",
        "\n",
        "π.χ.\n",
        "```\n",
        "df.plot[kind='', column='', by='')\n",
        "```"
      ],
      "metadata": {
        "id": "z69N9uBgPKxm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.plot(kind='box', column='star_rating', by='duration')"
      ],
      "metadata": {
        "id": "1ZFEguzJjTGF",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "outputId": "d152df88-44e3-4c53-8200-356b2d9673cd"
      },
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "star_rating    Axes(0.125,0.11;0.775x0.77)\n",
              "dtype: object"
            ]
          },
          "metadata": {},
          "execution_count": 98
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjcAAAGzCAYAAADT4Tb9AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAACGQ0lEQVR4nO3deXwTdf4/8FeSNm3atKFHSi/oCQVKpVDkLocCFQGpWCmIoqAueCCnrlVBXQTUBSzgLrjrgSfCl0V2RVdWUTm0Kx7Un3isFClIW6RcLS09IP38/qgzZNI0TZq0adPX8/HIAyYzn8985jOfmbw785nPqIQQAkREREQeQu3uAhARERG5EoMbIiIi8igMboiIiMijMLghIiIij8LghoiIiDwKgxsiIiLyKAxuiIiIyKMwuCEiIiKPwuCGiIiIPAqDGyLqkD799FOoVCp8+umn7i4KEbkYgxsiatRbb72F3NxcdxfDKX/961+xadMmdxeDiFqRiu+WIqLGTJgwAYcOHUJhYaG7i9JsvXv3RmhoaIMrNHV1daitrYVWq4Vazb/ziDwJj2gialWXL19GbW1ts9IKIVBVVeWScqjVavj6+jKwIfJAPKqJOrALFy5g/vz5iI2NhY+PD8LCwjBmzBh88803GDlyJN577z0cO3YMKpUKKpUKsbGxAIDa2losXboUaWlpMBgM8Pf3R3p6Oj755BNF/oWFhVCpVFi1ahVyc3ORkJAAHx8f/PDDD3aVLzY2FhMmTMCuXbvQv39/6HQ6vPDCCwCAV155Bddccw3CwsLg4+ODXr16YcOGDQ3Sf//999izZ4+8DSNHjgRgvc/NyJEj0bt3b/zwww8YNWoU/Pz8EBUVhWeffbZB2Y4dO4YbbrgB/v7+CAsLw4IFC7Br1y724yFqA7zcXQAicp85c+Zg27ZtuP/++9GrVy+cOXMG+/fvx48//ohHH30UZWVlOHHiBJ577jkAgF6vBwCUl5fjxRdfxLRp03D33XfjwoULeOmll5CRkYEDBw4gNTVVsZ5XXnkF1dXV+MMf/gAfHx8EBwfbXcb//e9/mDZtGmbPno27774bSUlJAIANGzYgOTkZN9xwA7y8vPDuu+/i3nvvRV1dHe677z4AQG5uLubOnQu9Xo9HH30UANC5c2eb6zt37hyuu+46TJ48GVOmTMG2bdvwxz/+ESkpKRg3bhwAoLKyEtdccw1KSkowb948hIeH46233moQ3BGRmwgi6rAMBoO47777Gp0/fvx4ERMT0+D7y5cvi5qaGsV3586dE507dxazZs2Svzt69KgAIAIDA8WpU6ccLl9MTIwAID744IMG8y5evNjgu4yMDBEfH6/4Ljk5WYwYMaLBsp988okAID755BP5uxEjRggA4rXXXpO/q6mpEeHh4eKmm26Sv1u9erUAIHbs2CF/V1VVJXr06NEgTyJqfbwtRdSBderUCV988QWKi4sdSqfRaKDVagHUd8w9e/YsLl++jP79++Obb75psPxNN90Eo9HYrDLGxcUhIyOjwfc6nU7+f1lZGU6fPo0RI0bgl19+QVlZWbPWBdRfnbr11lvlaa1WiwEDBuCXX36Rv/vggw8QFRWFG264Qf7O19cXd999d7PXS0Suw+CGqAN79tlncejQIXTp0gUDBgzAE088ofgRt+XVV1/FVVddBV9fX4SEhMBoNOK9996zGljExcU1u4yNpf3ss88wevRo+Pv7o1OnTjAajXjkkUcAwKngJjo6GiqVSvFdUFAQzp07J08fO3YMCQkJDZZLTExs9nqJyHUY3BB1YFOmTMEvv/yC9evXIzIyEn/+85+RnJyMf//73zbTvfHGG7jjjjuQkJCAl156CR988AE+/PBDXHPNNairq2uwvPlVFkdZS3vkyBFce+21OH36NNasWYP33nsPH374IRYsWAAAVstgL41GY/V7wVEziNoNdigm6uAiIiJw77334t5778WpU6fQr18/LF++HOPGjWtwZUKybds2xMfHY/v27YplHn/88VYp87vvvouamhr861//QteuXeXvrXXobWwbnBETE4MffvgBQghF/gUFBS5fFxE5jlduiDook8nU4PZNWFgYIiMjUVNTAwDw9/e3eotHurphfjXjiy++QF5eXguW2Pb6y8rK8MorrzRY1t/fH+fPn3fp+jMyMlBUVIR//etf8nfV1dX4+9//7tL1EFHz8MoNUQd14cIFREdHIysrC3369IFer8dHH32EL7/8EqtXrwYApKWlYcuWLVi4cCGuvvpq6PV6TJw4ERMmTMD27dtx4403Yvz48Th69Cg2btyIXr16oaKiosXLPnbsWGi1WkycOBGzZ89GRUUF/v73vyMsLAwlJSWKZdPS0rBhwwY89dRTSExMRFhYGK655hqn1j979mw8//zzmDZtGubNm4eIiAi8+eab8PX1BdAyV4uIyH4Mbog6KD8/P9x77734z3/+g+3bt6Ourg6JiYn461//invuuQcAcO+99yI/Px+vvPIKnnvuOcTExGDixIm44447cPLkSbzwwgvYtWsXevXqhTfeeAP/93//1yoD2CUlJWHbtm147LHHsHjxYoSHh+Oee+6B0WjErFmzFMsuXboUx44dw7PPPosLFy5gxIgRTgc3er0eH3/8MebOnYu1a9dCr9djxowZGDJkCG666SY5yCEi9+C7pYiIXCQ3NxcLFizAiRMnEBUV5e7iEHVYDG6IiJqhqqpK8SRXdXU1+vbtC5PJhJ9//tmNJSMi3pYiolZXWloKk8nU6HytVuvQKxrcYfLkyejatStSU1NRVlaGN954Az/99BPefPNNdxeNqMPjlRsianWxsbE4duxYo/NHjBjR5l8+mZubixdffBGFhYUwmUzo1asXHnroIWRnZ7u7aEQdHoMbImp1n332GaqqqhqdHxQUhLS0tFYsERF5EgY3RERE5FE4iB8RERF5FI/oUFxXV4fi4mIEBARw8CwiIqJ2QgiBCxcuIDIyEmq16663eERwU1xcjC5duri7GERERNQMv/76K6Kjo12Wn0cENwEBAQDqKycwMNDNpSEiIiJ7lJeXo0uXLvLvuKt4RHAj3YoKDAxkcENERNTOuLpLCTsUExERkUdhcENEREQehcENEREReRQGN0RERORRGNwQERGRR2FwQ0RERB6FwQ0RERF5FAY3RERE5FEY3BAREZFHYXBDREREHoXBDREREXkUBjdERETkURjcEFGHVFVrwleFZ7HjYBHOVtS6uzhE5EIMboioQzpSWoGsjXmYvyUfew+Xurs4RORCDG6IqENKMOqRm50KAIgO0rm3METkUgxuiKhD0mk1SAzTAwB8vTVuLg0RuRKDGyIiIvIoDG6IiIjIozgc3Fy4cAHz589HTEwMdDodhgwZgi+//LLR5bdv344xY8bAaDQiMDAQgwcPxq5duxTLPPHEE1CpVIpPjx49HN8aIiIi6vAcDm7uuusufPjhh3j99dfx3XffYezYsRg9ejSKioqsLr93716MGTMG77//Pr7++muMGjUKEydOxMGDBxXLJScno6SkRP7s37+/eVtEREREHZqXIwtXVVXhH//4B/75z39i+PDhAOqvurz7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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Παρατηρώντας το γράφημα βλέπουμε ότι:\n",
        "* ταινίες με βαθμολογία 8.9 έχουν μεγαλύτερη διάρκεια\n",
        "* καμία ταινία με διάρκεια μεγαλύτερη από 215 λεπτά δεν έχει βαθμολογία πάνω από 8.4\n",
        "* υπάρχει μόνο μία ταινία για κάθε βαθμολογία από 9 και πάνω (συνολικά 4 ταινίες)\n",
        "\n",
        "Βρίσκουμε τα ακριβή στατιστικά στοιχεία για τις ταινίες με βαθμολογία 8.9, με conditional filtering (η τιμή της στήλης star_rating να είναι ίση με 8.9) και describe().\n",
        "\n",
        "π.χ.\n",
        "```\n",
        "df[df['col_name'] == value].describe()\n",
        "```\n"
      ],
      "metadata": {
        "id": "Fw6I55uclsMo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# stats for star_rating\n",
        "df[df['star_rating'] == 8.9].describe()"
      ],
      "metadata": {
        "id": "LalDS-bnmVnA",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "outputId": "cd035e63-d753-4bdd-d2c8-2dede281d8c8"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       star_rating    duration\n",
              "count          6.0    6.000000\n",
              "mean           8.9  157.666667\n",
              "std            0.0   38.593609\n",
              "min            8.9   96.000000\n",
              "25%            8.9  142.750000\n",
              "50%            8.9  157.500000\n",
              "75%            8.9  186.500000\n",
              "max            8.9  201.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9ff34459-6175-433a-a558-168772b5535f\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>star_rating</th>\n",
              "      <th>duration</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>6.0</td>\n",
              "      <td>6.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>8.9</td>\n",
              "      <td>157.666667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.0</td>\n",
              "      <td>38.593609</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>8.9</td>\n",
              "      <td>96.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>8.9</td>\n",
              "      <td>142.750000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>8.9</td>\n",
              "      <td>157.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>8.9</td>\n",
              "      <td>186.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>8.9</td>\n",
              "      <td>201.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9ff34459-6175-433a-a558-168772b5535f')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9ff34459-6175-433a-a558-168772b5535f button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9ff34459-6175-433a-a558-168772b5535f');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-66489d7f-a35e-494c-845d-a64eb852db8d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-66489d7f-a35e-494c-845d-a64eb852db8d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-66489d7f-a35e-494c-845d-a64eb852db8d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df[df['star_rating'] == 8\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"star_rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.167130291875326,\n        \"min\": 0.0,\n        \"max\": 8.9,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          6.0,\n          8.9,\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"duration\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 70.1429906326189,\n        \"min\": 6.0,\n        \"max\": 201.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          157.66666666666666,\n          157.5,\n          6.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 106
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Επίσης με filtering, βρίσκουμε και ποιες είναι αυτές οι ταινίες (με star_rating ίσο με 8.9)."
      ],
      "metadata": {
        "id": "LpPetkX6sEGZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# rows with star_rating = 8.9\n",
        "df['star_rating'] == '8.9'"
      ],
      "metadata": {
        "id": "7FGDdLfUph1G",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c5a97aa9-53cc-4254-9173-34ed88014b0e"
      },
      "execution_count": 112,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      False\n",
              "1      False\n",
              "2      False\n",
              "3      False\n",
              "4      False\n",
              "       ...  \n",
              "974    False\n",
              "975    False\n",
              "976    False\n",
              "977    False\n",
              "978    False\n",
              "Name: star_rating, Length: 979, dtype: bool"
            ]
          },
          "metadata": {},
          "execution_count": 112
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **4.3 Καλύτερη ταινία ανά είδος**\n",
        "\n",
        "Μπορούμε να βρούμε την ταινία με την ψηλότερη βαθμολογία (star_rating) σε κάθε είδος (genre) με τη χρήση των sort_values, groupby και το keyword first():\n",
        "\n",
        "π.χ.\n",
        "\n",
        "```\n",
        "df.sort_values('col_name_for_sorting', ascending=False).groupby('col_name_for_grouping', as_index=False)[['title','star_rating']].first()\n",
        "```\n",
        "\n",
        "**Εξήγηση του παραπάνω κώδικα**:\n",
        "\n",
        "* df.sort_values('col_name_for_sorting', ascending=False): ταξινομούμε το dataframe σε φθίνουσα σειρά ως προς την επιθυμητή στήλη\n",
        "* groupby('col_name_for_grouping', as_index=False): ομαδοποιούμε τα δεδομένα στη βάση των τιμών της επιθυμητής στήλης - με το index=False ζητάμε να μη γίνουν index του dataframe που θα προκύψει τα ονόματα των ομάδων που θα φτιάξει το groupby\n",
        "* [['title','star_rating']]: oρίζουμε τις στήλες που θα έχει το dataframe που θα προκύψει\n",
        "* first(): ζητάμε την πρώτη εγγραφή σε κάθε ομάδα (στη βάση της φθίνουσας σειράς που έφτιαξε το sort_values) [*με το last() θα παίρναμε την τελευταία εγγραφή*]"
      ],
      "metadata": {
        "id": "4SoQJ4WU6mci"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# top star rated movie in every genre\n",
        "df.sort_values('title', ascending=False).groupby('star_rating', as_index=False)[['title','star_rating']].first()"
      ],
      "metadata": {
        "id": "1DqxEziH68XL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 677
        },
        "outputId": "0b881422-2377-47c3-febc-2aa715aaa545"
      },
      "execution_count": 115,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                            title  star_rating\n",
              "0                                Zero Dark Thirty          7.4\n",
              "1                                           [Rec]          7.5\n",
              "2                         When Harry Met Sally...          7.6\n",
              "3                                      Zombieland          7.7\n",
              "4                                            Zulu          7.8\n",
              "5                                      Ying xiong          7.9\n",
              "6                                    True Romance          8.0\n",
              "7                              Young Frankenstein          8.1\n",
              "8                                         Warrior          8.2\n",
              "9                               Wild Strawberries          8.3\n",
              "10                                        Yojimbo          8.4\n",
              "11                                    The Shining          8.5\n",
              "12                                       Whiplash          8.6\n",
              "13                             The Usual Suspects          8.7\n",
              "14          The Lord of the Rings: The Two Towers          8.8\n",
              "15  The Lord of the Rings: The Return of the King          8.9\n",
              "16                                The Dark Knight          9.0\n",
              "17                         The Godfather: Part II          9.1\n",
              "18                                  The Godfather          9.2\n",
              "19                       The Shawshank Redemption          9.3"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-63af4c28-fb44-4cd2-9aeb-7d55077f3073\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>title</th>\n",
              "      <th>star_rating</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Zero Dark Thirty</td>\n",
              "      <td>7.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>[Rec]</td>\n",
              "      <td>7.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>When Harry Met Sally...</td>\n",
              "      <td>7.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Zombieland</td>\n",
              "      <td>7.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Zulu</td>\n",
              "      <td>7.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>Ying xiong</td>\n",
              "      <td>7.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>True Romance</td>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>Young Frankenstein</td>\n",
              "      <td>8.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>Warrior</td>\n",
              "      <td>8.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>Wild Strawberries</td>\n",
              "      <td>8.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>Yojimbo</td>\n",
              "      <td>8.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>The Shining</td>\n",
              "      <td>8.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>Whiplash</td>\n",
              "      <td>8.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>The Usual Suspects</td>\n",
              "      <td>8.7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>The Lord of the Rings: The Two Towers</td>\n",
              "      <td>8.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>The Lord of the Rings: The Return of the King</td>\n",
              "      <td>8.9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>The Dark Knight</td>\n",
              "      <td>9.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>The Godfather: Part II</td>\n",
              "      <td>9.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>The Godfather</td>\n",
              "      <td>9.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>The Shawshank Redemption</td>\n",
              "      <td>9.3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-63af4c28-fb44-4cd2-9aeb-7d55077f3073')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-63af4c28-fb44-4cd2-9aeb-7d55077f3073 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-63af4c28-fb44-4cd2-9aeb-7d55077f3073');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-75a162b3-3af1-4a21-8dab-1ff0ae9557f7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-75a162b3-3af1-4a21-8dab-1ff0ae9557f7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-75a162b3-3af1-4a21-8dab-1ff0ae9557f7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 20,\n  \"fields\": [\n    {\n      \"column\": \"title\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"Zero Dark Thirty\",\n          \"The Godfather: Part II\",\n          \"The Lord of the Rings: The Return of the King\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"star_rating\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5916079783099616,\n        \"min\": 7.4,\n        \"max\": 9.3,\n        \"num_unique_values\": 20,\n        \"samples\": [\n          7.4,\n          9.1,\n          8.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 115
        }
      ]
    }
  ]
}